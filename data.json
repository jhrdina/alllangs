{
  "sections": [
    {
      "title": "General",
      "constructs": [
        {
          "title": "Multi-line string",
          "solutions": {
            "cplusplus": "std::string HELP_MSG =\n    \"great text\\n\"\n    \"with multiple\\n\"\n    \"lines\\n\";",
            "js": "var HELP_MSG =\n  'great text\\n' +\n  'with multiple\\n' +\n  'lines';",
            "java": "String HELP_MSG =\n    \"great text\\n\" +\n    \"with multiple\\n\" +\n    \"lines\";",
            "python": "HELP_MSG = \n\"\"\"great text\nwith multiple\nlines\"\"\"",
            "csharp": "string HELP_MSG =\n@\"great text\nwith multiple\nlines\";"
          }
        },
        {
          "title": "Call a static method",
          "solutions": {
            "cplusplus": "AmazingClass::method();",
            "java": "AmazingClass.method();",
            "js": "AmazingClass.method();"
          }
        }
      ]
    },
    {
      "title": "Collections",
      "constructs": [
        {
          "title": "Create a list of strings",
          "solutions": {
            "java": "ArrayList<String> list = new ArrayList<String>();",
            "cplusplus": "std::vector<std::string> list;",
            "js": "var list = [];",
            "python": "list = []",
            "csharp": "ArrayList list = new ArrayList();"
          }
        },
        {
          "title": "Append a new object at the end of the list",
          "solutions": {
            "java": "list.add(new Message(param));",
            "cplusplus": "list.push_back(Message(param));",
            "js": "list.push(new Message(param));",
            "csharp": "list.Add(new Message(param));"
          }
        },
        {
          "title": "Length of list",
          "solutions": {
            "java": "list.size();",
            "cplusplus": "list.size();",
            "js": "list.length",
            "csharp": "list.Count;"
          }
        },
        {
          "title": "Hash table",
          "solutions": {
            "cplusplus": "std::map<std::string, Message> table;",
            "js": "var table = {};",
            "java": "Map table = new HashMap();"
          }
        },
        {
          "title": "Add item to hash table",
          "solutions": {
            "cplusplus": "table[\"text\"] = Message(param);",
            "js": "table['text'] = new Message(param);",
            "java": "table.put(\"text\", new Message(param));"
          }
        },
        {
          "title": "Check that key exists",
          "solutions": {
            "cplusplus": "bool exists = table.count(\"text\");",
            "js": "var exists = table.hasOwnProperty('text');",
            "java": "boolean exists = table.containsKey(\"text\");"
          }
        },
        {
          "title": "Iterate over hashtable items",
          "solutions": {
            "cplusplus": "for (auto const &iter : messagesByServer) {\n    std::string &key = iter.first;\n    Message &value = iter.second;\n}"
          }
        }
      ]
    },
    {
      "title": "Exceptions",
      "constructs": [
        {
          "title": "Custom exception definition",
          "solutions": {
            "cplusplus": "#include <stdexcept>\n#include <string>\n\nclass CustomException: public std::runtime_error {\npublic:\n    CustomException(std::string message):\n        std::runtime_error(message) {}\n};",
            "java": "public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}"
          }
        },
        {
          "title": "Exception throwing",
          "solutions": {
            "java": "throw new CustomException(\"Message\");",
            "cplusplus": "throw CustomException(\"Message\");",
            "js": "throw 'Message';"
          }
        },
        {
          "title": "Exception catching",
          "solutions": {
            "java": "try {\n    // Code that should throw an exception\n} catch (CustomException e) {\n    System.err.println(e.getMessage());\n}",
            "cplusplus": "try {\n    // Code that should throw an exception\n} catch (const CustomException& e) {\n    std::cerr << e.what() << std::endl;\n}",
            "js": "try {\n  // Code that should throw an exception\n} catch(err) {\n  console.log(err.message);\n}"
          }
        }
      ]
    },
    {
      "title": "Files",
      "constructs": [
        {
          "title": "Read file line by line",
          "solutions": {
            "cplusplus": "#include <fstream>\n\nstd::ifstream fr(“soubor.txt”);\n\nstd::string line;\nwhile (std::getline(fr, line)) {\n    std::cout << line << std::endl;\n}\n\nfr.close();",
            "java": "try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n    String line;\n    while ((line = br.readLine()) != null) {\n       System.out.println(line);\n    }\n}",
            "js": "var fileInput = document.getElementById('fileInput');\n\nvar reader = new FileReader();\n\nreader.onload = function(e) {\n  var lines = reader.result.split('\n');\n  for(var i = 0; i < lines.length; i++) {\n    console.log(lines[i]);\n  }\n}\n\nreader.readAsText(fileInput.files[0]);"
          }
        }
      ]
    },
    {
      "title": "Conversions",
      "constructs": [
        {
          "title": "Convert integer to string",
          "solutions": {
            "cplusplus": "std::string numAsStr = std::to_string(42);",
            "java": "String numAsStr = Integer.toString(42);",
            "js": "var numAsStr = (42).toString();"
          }
        }
      ]
    }
  ],
  "languages": [
    {
      "id": "cplusplus",
      "name": "C++",
      "prism": "cpp"
    },
    {
      "id": "csharp",
      "name": "C#",
      "prism": "csharp"
    },
    {
      "id": "java",
      "name": "Java",
      "prism": "java"
    },
    {
      "id": "js",
      "name": "JavaScript",
      "prism": "javascript"
    },
    {
      "id": "python",
      "name": "Python",
      "prism": "python"
    }
  ]
}