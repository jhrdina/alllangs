{
  "sections": [
    {
      "title": "General",
      "constructs": [
        {
          "title": "Multi-line string",
          "solutions": {
            "cplusplus": "std::string HELP_MSG =\n    \"great text\\n\"\n    \"with multiple\\n\"\n    \"lines\\n\";",
            "csharp": "string HELP_MSG =\n@\"great text\nwith multiple\nlines\";",
            "java": "String HELP_MSG =\n    \"great text\\n\" +\n    \"with multiple\\n\" +\n    \"lines\";",
            "js": "var HELP_MSG =\n  'great text\\n' +\n  'with multiple\\n' +\n  'lines';",
            "python": "HELP_MSG = \n\"\"\"great text\nwith multiple\nlines\"\"\""
          }
        },
        {
          "title": "Call a static method",
          "solutions": {
            "cplusplus": "AmazingClass::method();",
            "java": "AmazingClass.method();",
            "js": "AmazingClass.method();",
            "python": "AmazingClass.hust()"
          }
        }
      ]
    },
    {
      "title": "Collections",
      "constructs": [
        {
          "title": "Create a list of strings",
          "solutions": {
            "cplusplus": "#include <vector>\nstd::vector<std::string> list;",
            "csharp": "ArrayList list = new ArrayList();",
            "java": "ArrayList<String> list = new ArrayList<String>();",
            "js": "var list = [];",
            "python": "list = []"
          }
        },
        {
          "title": "Append a new object at the end of the list",
          "solutions": {
            "cplusplus": "list.push_back(Message(param));",
            "csharp": "list.Add(new Message(param));",
            "java": "list.add(new Message(param));",
            "js": "list.push(new Message(param));",
            "python": "list.append(Message(param))"
          }
        },
        {
          "title": "Length of list",
          "solutions": {
            "cplusplus": "list.size();",
            "csharp": "list.Count;",
            "java": "list.size();",
            "js": "list.length",
            "python": "len(list)"
          }
        },
        {
          "title": "Index of a list item",
          "solutions": {
            "cplusplus": "#include <algorithm>\n\nstd::vector<int>::iterator it = find (list.begin(), list.end(), message);\nint i = it != list.end() ? *it : -1;",
            "java": "int i = list.indexOf(message);",
            "js": "var i = list.indexOf(message);"
          }
        },
        {
          "title": "Remove item with index",
          "solutions": {
            "cplusplus": "list.erase(list.begin() + index);",
            "java": "list.remove(index);",
            "js": "list.splice(index, 1);"
          }
        },
        {
          "title": "Hash table",
          "solutions": {
            "cplusplus": "std::map<std::string, Message> table;",
            "java": "Map table = new HashMap();",
            "js": "var table = {};",
            "python": "table = {}"
          }
        },
        {
          "title": "Add item to hash table",
          "solutions": {
            "cplusplus": "table[\"text\"] = Message(param);",
            "java": "table.put(\"text\", new Message(param));",
            "js": "table['text'] = new Message(param);",
            "python": "table['text'] = Message(param)"
          }
        },
        {
          "title": "Check that key exists",
          "solutions": {
            "cplusplus": "bool exists = table.count(\"text\");",
            "java": "boolean exists = table.containsKey(\"text\");",
            "js": "var exists = table.hasOwnProperty('text');",
            "python": "exists = 'text' in table"
          }
        },
        {
          "title": "Iterate over hashtable items",
          "solutions": {
            "cplusplus": "for (auto const &iter : messagesByServer) {\n    std::string &key = iter.first;\n    Message &value = iter.second;\n}",
            "java": "for (Map.Entry<String, Message> entry : table.entrySet()) {\n    String key = entry.getKey();\n    Message value = entry.getValue();\n}",
            "js": "Object.keys(table).forEach(function (key) {\n  var value = table[key];\n});",
            "python": "for k, v in table.iteritems():\n    key = k\n    value = v"
          }
        },
        {
          "title": "Number of hash table items",
          "solutions": {
            "cplusplus": "int n = table.size();",
            "java": "int n = table.size();",
            "js": "Object.keys(table).length;"
          }
        }
      ]
    },
    {
      "title": "Exceptions",
      "constructs": [
        {
          "title": "Custom exception definition",
          "solutions": {
            "cplusplus": "#include <stdexcept>\n#include <string>\n\nclass CustomException: public std::runtime_error {\npublic:\n    CustomException(std::string message):\n        std::runtime_error(message) {}\n};",
            "java": "public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}"
          }
        },
        {
          "title": "Exception throwing",
          "solutions": {
            "cplusplus": "throw CustomException(\"Message\");",
            "java": "throw new CustomException(\"Message\");",
            "js": "throw 'Message';"
          }
        },
        {
          "title": "Exception catching",
          "solutions": {
            "cplusplus": "try {\n    // Code that should throw an exception\n} catch (const CustomException& e) {\n    std::cerr << e.what() << std::endl;\n}",
            "java": "try {\n    // Code that should throw an exception\n} catch (CustomException e) {\n    System.err.println(e.getMessage());\n}",
            "js": "try {\n  // Code that should throw an exception\n} catch(err) {\n  console.log(err.message);\n}"
          }
        }
      ]
    },
    {
      "title": "Files",
      "constructs": [
        {
          "title": "Read file line by line",
          "solutions": {
            "cplusplus": "#include <fstream>\n\nstd::ifstream fr(“file.txt”);\n\nstd::string line;\nwhile (std::getline(fr, line)) {\n    std::cout << line << std::endl;\n}\n\nfr.close();",
            "java": "try (BufferedReader br =\n     new BufferedReader(\n     new FileReader(\n     new File(\"file.txt\")))) {\n\n    String line;\n    while ((line = br.readLine()) != null) {\n       System.out.println(line);\n    }\n} catch (IOException ex) {\n    System.err.println(\"Error: \" + ex.getMessage());\n}",
            "js": "var fileInput = document.getElementById('fileInput');\n\nvar reader = new FileReader();\n\nreader.onload = function(e) {\n  var lines = reader.result.split('\n');\n  for(var i = 0; i < lines.length; i++) {\n    console.log(lines[i]);\n  }\n}\n\nreader.readAsText(fileInput.files[0]);",
            "python": "with open('file.txt') as fr:\n    for line in fr:\n        print(line)"
          }
        }
      ]
    },
    {
      "title": "Conversions",
      "constructs": [
        {
          "title": "Convert integer to string",
          "solutions": {
            "cplusplus": "std::string numAsStr = std::to_string(42);",
            "java": "String numAsStr = Integer.toString(42);",
            "js": "var numAsStr = (42).toString();",
            "python": "numAsStr = str(42)"
          }
        },
        {
          "title": "Convert string to integer",
          "solutions": {
            "cplusplus": "int strAsNum = std::stoi(\"42\");",
            "java": "int strAsNum = Integer.parseInt(\"42\");",
            "js": "var strAsNum = parseInt('42');"
          }
        }
      ]
    },
    {
      "title": "Random numbers",
      "constructs": [
        {
          "title": "Random integer between min (inclusive) and max (inclusive)",
          "solutions": {
            "cplusplus": "#include <time.h>\n\n// First time:\nsrand(time(NULL));\n\nint n = rand() % (max - min + 1) + min;",
            "java": "Random random = new Random();\nint n = random.nextInt(max - min + 1) + min;",
            "js": "var n = Math.floor(Math.random() * (max - min + 1)) + min;"
          }
        }
      ]
    }
  ],
  "languages": [
    {
      "id": "cplusplus",
      "name": "C++",
      "prism": "cpp"
    },
    {
      "id": "csharp",
      "name": "C#",
      "prism": "csharp"
    },
    {
      "id": "java",
      "name": "Java",
      "prism": "java"
    },
    {
      "id": "js",
      "name": "JavaScript",
      "prism": "javascript"
    },
    {
      "id": "python",
      "name": "Python",
      "prism": "python"
    }
  ]
}